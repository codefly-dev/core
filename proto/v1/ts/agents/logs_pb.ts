// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file agents/logs.proto (package v1.agents.logs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Session } from "../base/sessions_pb.js";

/**
 * @generated from message v1.agents.logs.Log
 */
export class Log extends Message<Log> {
  /**
   * @generated from field: google.protobuf.Timestamp at = 1;
   */
  at?: Timestamp;

  /**
   * @generated from field: string application = 2;
   */
  application = "";

  /**
   * @generated from field: string service = 3;
   */
  service = "";

  /**
   * @generated from field: v1.agents.logs.Log.Kind kind = 4;
   */
  kind = Log_Kind.UNKNOWN;

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  constructor(data?: PartialMessage<Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.agents.logs.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "at", kind: "message", T: Timestamp },
    { no: 2, name: "application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "kind", kind: "enum", T: proto3.getEnumType(Log_Kind) },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Log {
    return new Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJsonString(jsonString, options);
  }

  static equals(a: Log | PlainMessage<Log> | undefined, b: Log | PlainMessage<Log> | undefined): boolean {
    return proto3.util.equals(Log, a, b);
  }
}

/**
 * @generated from enum v1.agents.logs.Log.Kind
 */
export enum Log_Kind {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: AGENT = 1;
   */
  AGENT = 1,

  /**
   * @generated from enum value: SERVICE = 2;
   */
  SERVICE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Log_Kind)
proto3.util.setEnumType(Log_Kind, "v1.agents.logs.Log.Kind", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "AGENT" },
  { no: 2, name: "SERVICE" },
]);

/**
 * @generated from message v1.agents.logs.LogSessionGroup
 */
export class LogSessionGroup extends Message<LogSessionGroup> {
  /**
   * @generated from field: v1.base.Session session = 1;
   */
  session?: Session;

  /**
   * @generated from field: repeated v1.agents.logs.Log logs = 2;
   */
  logs: Log[] = [];

  constructor(data?: PartialMessage<LogSessionGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.agents.logs.LogSessionGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: Session },
    { no: 2, name: "logs", kind: "message", T: Log, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogSessionGroup {
    return new LogSessionGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogSessionGroup {
    return new LogSessionGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogSessionGroup {
    return new LogSessionGroup().fromJsonString(jsonString, options);
  }

  static equals(a: LogSessionGroup | PlainMessage<LogSessionGroup> | undefined, b: LogSessionGroup | PlainMessage<LogSessionGroup> | undefined): boolean {
    return proto3.util.equals(LogSessionGroup, a, b);
  }
}

