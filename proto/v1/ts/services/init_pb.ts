// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file services/init.proto (package v1.services, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { EndpointGroup } from "../base/api_pb.js";

/**
 * @generated from message v1.services.InitStatus
 */
export class InitStatus extends Message<InitStatus> {
  /**
   * @generated from field: v1.services.InitStatus.State state = 1;
   */
  state = InitStatus_State.UNKNOWN;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<InitStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.InitStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(InitStatus_State) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitStatus {
    return new InitStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitStatus {
    return new InitStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitStatus {
    return new InitStatus().fromJsonString(jsonString, options);
  }

  static equals(a: InitStatus | PlainMessage<InitStatus> | undefined, b: InitStatus | PlainMessage<InitStatus> | undefined): boolean {
    return proto3.util.equals(InitStatus, a, b);
  }
}

/**
 * @generated from enum v1.services.InitStatus.State
 */
export enum InitStatus_State {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: READY = 1;
   */
  READY = 1,

  /**
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(InitStatus_State)
proto3.util.setEnumType(InitStatus_State, "v1.services.InitStatus.State", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "READY" },
  { no: 2, name: "ERROR" },
]);

/**
 * @generated from message v1.services.Version
 */
export class Version extends Message<Version> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<Version>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.Version";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Version {
    return new Version().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Version {
    return new Version().fromJsonString(jsonString, options);
  }

  static equals(a: Version | PlainMessage<Version> | undefined, b: Version | PlainMessage<Version> | undefined): boolean {
    return proto3.util.equals(Version, a, b);
  }
}

/**
 * @generated from message v1.services.ServiceIdentity
 */
export class ServiceIdentity extends Message<ServiceIdentity> {
  /**
   * The name of the service
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The domain of the service
   *
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * The application of the service | logical partitioning
   *
   * @generated from field: string application = 3;
   */
  application = "";

  /**
   * The namespace of the service | resource partitioning
   *
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  constructor(data?: PartialMessage<ServiceIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.ServiceIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceIdentity {
    return new ServiceIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceIdentity {
    return new ServiceIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceIdentity {
    return new ServiceIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceIdentity | PlainMessage<ServiceIdentity> | undefined, b: ServiceIdentity | PlainMessage<ServiceIdentity> | undefined): boolean {
    return proto3.util.equals(ServiceIdentity, a, b);
  }
}

/**
 * @generated from message v1.services.InitRequest
 */
export class InitRequest extends Message<InitRequest> {
  /**
   * Developer debug
   *
   * @generated from field: bool debug = 1;
   */
  debug = false;

  /**
   * Location of the service on the filesystem
   *
   * @generated from field: string location = 2;
   */
  location = "";

  /**
   * Identity of the service
   *
   * @generated from field: v1.services.ServiceIdentity identity = 3;
   */
  identity?: ServiceIdentity;

  /**
   * Dependency EndpointGroup
   *
   * @generated from field: v1.base.EndpointGroup dependency_endpoint_group = 4;
   */
  dependencyEndpointGroup?: EndpointGroup;

  constructor(data?: PartialMessage<InitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.InitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "debug", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "identity", kind: "message", T: ServiceIdentity },
    { no: 4, name: "dependency_endpoint_group", kind: "message", T: EndpointGroup },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitRequest {
    return new InitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitRequest {
    return new InitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitRequest | PlainMessage<InitRequest> | undefined, b: InitRequest | PlainMessage<InitRequest> | undefined): boolean {
    return proto3.util.equals(InitRequest, a, b);
  }
}

