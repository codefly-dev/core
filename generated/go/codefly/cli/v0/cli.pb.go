// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: codefly/cli/v0/cli.proto

package v0

import (
	reflect "reflect"
	sync "sync"

	v01 "github.com/codefly-dev/core/generated/go/codefly/base/v0"
	v0 "github.com/codefly-dev/core/generated/go/codefly/observability/v0"
	v02 "github.com/codefly-dev/core/generated/go/codefly/services/agent/v0"
	_ "github.com/codefly-dev/core/generated/go/codefly/services/runtime/v0"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAgentInformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent string `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *GetAgentInformationRequest) Reset() {
	*x = GetAgentInformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgentInformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentInformationRequest) ProtoMessage() {}

func (x *GetAgentInformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentInformationRequest.ProtoReflect.Descriptor instead.
func (*GetAgentInformationRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{0}
}

func (x *GetAgentInformationRequest) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

type MultiGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Graphs []*v0.GraphResponse `protobuf:"bytes,1,rep,name=graphs,proto3" json:"graphs,omitempty"`
}

func (x *MultiGraphResponse) Reset() {
	*x = MultiGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiGraphResponse) ProtoMessage() {}

func (x *MultiGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiGraphResponse.ProtoReflect.Descriptor instead.
func (*MultiGraphResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{1}
}

func (x *MultiGraphResponse) GetGraphs() []*v0.GraphResponse {
	if x != nil {
		return x.Graphs
	}
	return nil
}

type ActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace string `protobuf:"bytes,1,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Module    string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Service   string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ActiveResponse) Reset() {
	*x = ActiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveResponse) ProtoMessage() {}

func (x *ActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveResponse.ProtoReflect.Descriptor instead.
func (*ActiveResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{2}
}

func (x *ActiveResponse) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *ActiveResponse) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ActiveResponse) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type RunningInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Service  string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	AgentPid int32  `protobuf:"varint,3,opt,name=agent_pid,json=agentPid,proto3" json:"agent_pid,omitempty"`
}

func (x *RunningInformation) Reset() {
	*x = RunningInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningInformation) ProtoMessage() {}

func (x *RunningInformation) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningInformation.ProtoReflect.Descriptor instead.
func (*RunningInformation) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{3}
}

func (x *RunningInformation) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *RunningInformation) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RunningInformation) GetAgentPid() int32 {
	if x != nil {
		return x.AgentPid
	}
	return 0
}

type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Service  string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{4}
}

func (x *GetAddressRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *GetAddressRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GetAddressRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type GetAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetAddressResponse) Reset() {
	*x = GetAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressResponse) ProtoMessage() {}

func (x *GetAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressResponse.ProtoReflect.Descriptor instead.
func (*GetAddressResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{5}
}

func (x *GetAddressResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Get Network Mappings
type GetNetworkMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module  string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetNetworkMappingsRequest) Reset() {
	*x = GetNetworkMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkMappingsRequest) ProtoMessage() {}

func (x *GetNetworkMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkMappingsRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkMappingsRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{6}
}

func (x *GetNetworkMappingsRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *GetNetworkMappingsRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetNetworkMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkMappings []*v01.NetworkMapping `protobuf:"bytes,1,rep,name=network_mappings,json=networkMappings,proto3" json:"network_mappings,omitempty"`
}

func (x *GetNetworkMappingsResponse) Reset() {
	*x = GetNetworkMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkMappingsResponse) ProtoMessage() {}

func (x *GetNetworkMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkMappingsResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkMappingsResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{7}
}

func (x *GetNetworkMappingsResponse) GetNetworkMappings() []*v01.NetworkMapping {
	if x != nil {
		return x.NetworkMappings
	}
	return nil
}

type GetConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module  string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *GetConfigurationRequest) Reset() {
	*x = GetConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationRequest) ProtoMessage() {}

func (x *GetConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{8}
}

func (x *GetConfigurationRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *GetConfigurationRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type GetConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *v01.Configuration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *GetConfigurationResponse) Reset() {
	*x = GetConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationResponse) ProtoMessage() {}

func (x *GetConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigurationResponse) GetConfiguration() *v01.Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type GetConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configurations []*v01.Configuration `protobuf:"bytes,1,rep,name=configurations,proto3" json:"configurations,omitempty"`
}

func (x *GetConfigurationsResponse) Reset() {
	*x = GetConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigurationsResponse) ProtoMessage() {}

func (x *GetConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*GetConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{10}
}

func (x *GetConfigurationsResponse) GetConfigurations() []*v01.Configuration {
	if x != nil {
		return x.Configurations
	}
	return nil
}

type FlowStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ready bool `protobuf:"varint,1,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *FlowStatus) Reset() {
	*x = FlowStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowStatus) ProtoMessage() {}

func (x *FlowStatus) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowStatus.ProtoReflect.Descriptor instead.
func (*FlowStatus) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{11}
}

func (x *FlowStatus) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type StopFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopFlowRequest) Reset() {
	*x = StopFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopFlowRequest) ProtoMessage() {}

func (x *StopFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopFlowRequest.ProtoReflect.Descriptor instead.
func (*StopFlowRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{12}
}

type StopFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopFlowResponse) Reset() {
	*x = StopFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopFlowResponse) ProtoMessage() {}

func (x *StopFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopFlowResponse.ProtoReflect.Descriptor instead.
func (*StopFlowResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{13}
}

type DestroyFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestroyFlowRequest) Reset() {
	*x = DestroyFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyFlowRequest) ProtoMessage() {}

func (x *DestroyFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyFlowRequest.ProtoReflect.Descriptor instead.
func (*DestroyFlowRequest) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{14}
}

type DestroyFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DestroyFlowResponse) Reset() {
	*x = DestroyFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_codefly_cli_v0_cli_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyFlowResponse) ProtoMessage() {}

func (x *DestroyFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_codefly_cli_v0_cli_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyFlowResponse.ProtoReflect.Descriptor instead.
func (*DestroyFlowResponse) Descriptor() ([]byte, []int) {
	return file_codefly_cli_v0_cli_proto_rawDescGZIP(), []int{15}
}

var File_codefly_cli_v0_cli_proto protoreflect.FileDescriptor

var file_codefly_cli_v0_cli_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x1a, 0x1e, 0x63, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x66,
	0x6c, 0x79, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x30, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x25, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x2f, 0x76, 0x30, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x30, 0x2f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x63, 0x6f, 0x64,
	0x65, 0x66, 0x6c, 0x79, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2f, 0x76, 0x30, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c,
	0x79, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x30, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x55, 0x0a,
	0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x22, 0x60, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x2e,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x68, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c,
	0x79, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x22, 0x0a, 0x0a, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22,
	0x11, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xe0, 0x10, 0x0a, 0x03, 0x43, 0x4c, 0x49, 0x12, 0x45, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x30, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66,
	0x6c, 0x79, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x30, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x91, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x63, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76,
	0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x97, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e,
	0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63,
	0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x12, 0x38, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66,
	0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x12, 0xb6, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69,
	0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d,
	0x12, 0xbc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c,
	0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x12,
	0xac, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e,
	0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x7d, 0x12, 0x58,
	0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x30, 0x01, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x6c,
	0x6f, 0x67, 0x73, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63,
	0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6b, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1f, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x14, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x77, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x22, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76,
	0x30, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x42, 0xb1, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x76, 0x30, 0x42, 0x08, 0x43,
	0x6c, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2d, 0x64, 0x65,
	0x76, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x66, 0x6c, 0x79, 0x2f, 0x63, 0x6c, 0x69, 0x2f,
	0x76, 0x30, 0xa2, 0x02, 0x03, 0x43, 0x43, 0x56, 0xaa, 0x02, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x66,
	0x6c, 0x79, 0x2e, 0x43, 0x6c, 0x69, 0x2e, 0x56, 0x30, 0xca, 0x02, 0x0e, 0x43, 0x6f, 0x64, 0x65,
	0x66, 0x6c, 0x79, 0x5c, 0x43, 0x6c, 0x69, 0x5c, 0x56, 0x30, 0xe2, 0x02, 0x1a, 0x43, 0x6f, 0x64,
	0x65, 0x66, 0x6c, 0x79, 0x5c, 0x43, 0x6c, 0x69, 0x5c, 0x56, 0x30, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x66, 0x6c,
	0x79, 0x3a, 0x3a, 0x43, 0x6c, 0x69, 0x3a, 0x3a, 0x56, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_codefly_cli_v0_cli_proto_rawDescOnce sync.Once
	file_codefly_cli_v0_cli_proto_rawDescData = file_codefly_cli_v0_cli_proto_rawDesc
)

func file_codefly_cli_v0_cli_proto_rawDescGZIP() []byte {
	file_codefly_cli_v0_cli_proto_rawDescOnce.Do(func() {
		file_codefly_cli_v0_cli_proto_rawDescData = protoimpl.X.CompressGZIP(file_codefly_cli_v0_cli_proto_rawDescData)
	})
	return file_codefly_cli_v0_cli_proto_rawDescData
}

var file_codefly_cli_v0_cli_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_codefly_cli_v0_cli_proto_goTypes = []any{
	(*GetAgentInformationRequest)(nil), // 0: codefly.cli.v0.GetAgentInformationRequest
	(*MultiGraphResponse)(nil),         // 1: codefly.cli.v0.MultiGraphResponse
	(*ActiveResponse)(nil),             // 2: codefly.cli.v0.ActiveResponse
	(*RunningInformation)(nil),         // 3: codefly.cli.v0.RunningInformation
	(*GetAddressRequest)(nil),          // 4: codefly.cli.v0.GetAddressRequest
	(*GetAddressResponse)(nil),         // 5: codefly.cli.v0.GetAddressResponse
	(*GetNetworkMappingsRequest)(nil),  // 6: codefly.cli.v0.GetNetworkMappingsRequest
	(*GetNetworkMappingsResponse)(nil), // 7: codefly.cli.v0.GetNetworkMappingsResponse
	(*GetConfigurationRequest)(nil),    // 8: codefly.cli.v0.GetConfigurationRequest
	(*GetConfigurationResponse)(nil),   // 9: codefly.cli.v0.GetConfigurationResponse
	(*GetConfigurationsResponse)(nil),  // 10: codefly.cli.v0.GetConfigurationsResponse
	(*FlowStatus)(nil),                 // 11: codefly.cli.v0.FlowStatus
	(*StopFlowRequest)(nil),            // 12: codefly.cli.v0.StopFlowRequest
	(*StopFlowResponse)(nil),           // 13: codefly.cli.v0.StopFlowResponse
	(*DestroyFlowRequest)(nil),         // 14: codefly.cli.v0.DestroyFlowRequest
	(*DestroyFlowResponse)(nil),        // 15: codefly.cli.v0.DestroyFlowResponse
	(*v0.GraphResponse)(nil),           // 16: codefly.observability.v0.GraphResponse
	(*v01.NetworkMapping)(nil),         // 17: codefly.base.v0.NetworkMapping
	(*v01.Configuration)(nil),          // 18: codefly.base.v0.Configuration
	(*emptypb.Empty)(nil),              // 19: google.protobuf.Empty
	(*v0.LogRequest)(nil),              // 20: codefly.observability.v0.LogRequest
	(*v02.AgentInformation)(nil),       // 21: codefly.services.agent.v0.AgentInformation
	(*v01.Workspace)(nil),              // 22: codefly.base.v0.Workspace
	(*v0.Log)(nil),                     // 23: codefly.observability.v0.Log
	(*v0.LogResponse)(nil),             // 24: codefly.observability.v0.LogResponse
}
var file_codefly_cli_v0_cli_proto_depIdxs = []int32{
	16, // 0: codefly.cli.v0.MultiGraphResponse.graphs:type_name -> codefly.observability.v0.GraphResponse
	17, // 1: codefly.cli.v0.GetNetworkMappingsResponse.network_mappings:type_name -> codefly.base.v0.NetworkMapping
	18, // 2: codefly.cli.v0.GetConfigurationResponse.configuration:type_name -> codefly.base.v0.Configuration
	18, // 3: codefly.cli.v0.GetConfigurationsResponse.configurations:type_name -> codefly.base.v0.Configuration
	19, // 4: codefly.cli.v0.CLI.Ping:input_type -> google.protobuf.Empty
	0,  // 5: codefly.cli.v0.CLI.GetAgentInformation:input_type -> codefly.cli.v0.GetAgentInformationRequest
	19, // 6: codefly.cli.v0.CLI.GetWorkspaceInventory:input_type -> google.protobuf.Empty
	19, // 7: codefly.cli.v0.CLI.GetWorkspaceServiceDependencyGraph:input_type -> google.protobuf.Empty
	19, // 8: codefly.cli.v0.CLI.GetWorkspacePublicModulesDependencyGraph:input_type -> google.protobuf.Empty
	19, // 9: codefly.cli.v0.CLI.GetActive:input_type -> google.protobuf.Empty
	4,  // 10: codefly.cli.v0.CLI.GetAddresses:input_type -> codefly.cli.v0.GetAddressRequest
	8,  // 11: codefly.cli.v0.CLI.GetConfiguration:input_type -> codefly.cli.v0.GetConfigurationRequest
	8,  // 12: codefly.cli.v0.CLI.GetDependenciesConfigurations:input_type -> codefly.cli.v0.GetConfigurationRequest
	6,  // 13: codefly.cli.v0.CLI.GetDependenciesNetworkMappings:input_type -> codefly.cli.v0.GetNetworkMappingsRequest
	8,  // 14: codefly.cli.v0.CLI.GetRuntimeConfigurations:input_type -> codefly.cli.v0.GetConfigurationRequest
	19, // 15: codefly.cli.v0.CLI.Logs:input_type -> google.protobuf.Empty
	20, // 16: codefly.cli.v0.CLI.ActiveLogHistory:input_type -> codefly.observability.v0.LogRequest
	19, // 17: codefly.cli.v0.CLI.GetFlowStatus:input_type -> google.protobuf.Empty
	12, // 18: codefly.cli.v0.CLI.StopFlow:input_type -> codefly.cli.v0.StopFlowRequest
	14, // 19: codefly.cli.v0.CLI.DestroyFlow:input_type -> codefly.cli.v0.DestroyFlowRequest
	19, // 20: codefly.cli.v0.CLI.Ping:output_type -> google.protobuf.Empty
	21, // 21: codefly.cli.v0.CLI.GetAgentInformation:output_type -> codefly.services.agent.v0.AgentInformation
	22, // 22: codefly.cli.v0.CLI.GetWorkspaceInventory:output_type -> codefly.base.v0.Workspace
	16, // 23: codefly.cli.v0.CLI.GetWorkspaceServiceDependencyGraph:output_type -> codefly.observability.v0.GraphResponse
	1,  // 24: codefly.cli.v0.CLI.GetWorkspacePublicModulesDependencyGraph:output_type -> codefly.cli.v0.MultiGraphResponse
	2,  // 25: codefly.cli.v0.CLI.GetActive:output_type -> codefly.cli.v0.ActiveResponse
	5,  // 26: codefly.cli.v0.CLI.GetAddresses:output_type -> codefly.cli.v0.GetAddressResponse
	9,  // 27: codefly.cli.v0.CLI.GetConfiguration:output_type -> codefly.cli.v0.GetConfigurationResponse
	10, // 28: codefly.cli.v0.CLI.GetDependenciesConfigurations:output_type -> codefly.cli.v0.GetConfigurationsResponse
	7,  // 29: codefly.cli.v0.CLI.GetDependenciesNetworkMappings:output_type -> codefly.cli.v0.GetNetworkMappingsResponse
	10, // 30: codefly.cli.v0.CLI.GetRuntimeConfigurations:output_type -> codefly.cli.v0.GetConfigurationsResponse
	23, // 31: codefly.cli.v0.CLI.Logs:output_type -> codefly.observability.v0.Log
	24, // 32: codefly.cli.v0.CLI.ActiveLogHistory:output_type -> codefly.observability.v0.LogResponse
	11, // 33: codefly.cli.v0.CLI.GetFlowStatus:output_type -> codefly.cli.v0.FlowStatus
	13, // 34: codefly.cli.v0.CLI.StopFlow:output_type -> codefly.cli.v0.StopFlowResponse
	15, // 35: codefly.cli.v0.CLI.DestroyFlow:output_type -> codefly.cli.v0.DestroyFlowResponse
	20, // [20:36] is the sub-list for method output_type
	4,  // [4:20] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_codefly_cli_v0_cli_proto_init() }
func file_codefly_cli_v0_cli_proto_init() {
	if File_codefly_cli_v0_cli_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_codefly_cli_v0_cli_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgentInformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MultiGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ActiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RunningInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetworkMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetworkMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FlowStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*StopFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*StopFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DestroyFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_codefly_cli_v0_cli_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DestroyFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_codefly_cli_v0_cli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_codefly_cli_v0_cli_proto_goTypes,
		DependencyIndexes: file_codefly_cli_v0_cli_proto_depIdxs,
		MessageInfos:      file_codefly_cli_v0_cli_proto_msgTypes,
	}.Build()
	File_codefly_cli_v0_cli_proto = out.File
	file_codefly_cli_v0_cli_proto_rawDesc = nil
	file_codefly_cli_v0_cli_proto_goTypes = nil
	file_codefly_cli_v0_cli_proto_depIdxs = nil
}
