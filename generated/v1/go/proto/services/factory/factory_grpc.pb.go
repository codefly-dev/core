// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/services/factory/factory.proto

package factory

import (
	context "context"
	agents "github.com/codefly-dev/core/generated/v1/go/proto/agents"
	services "github.com/codefly-dev/core/generated/v1/go/proto/services"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Factory_Init_FullMethodName        = "/v1.services.factory.Factory/Init"
	Factory_Create_FullMethodName      = "/v1.services.factory.Factory/Create"
	Factory_Update_FullMethodName      = "/v1.services.factory.Factory/Update"
	Factory_Sync_FullMethodName        = "/v1.services.factory.Factory/Sync"
	Factory_Build_FullMethodName       = "/v1.services.factory.Factory/Build"
	Factory_Deploy_FullMethodName      = "/v1.services.factory.Factory/Deploy"
	Factory_Communicate_FullMethodName = "/v1.services.factory.Factory/Communicate"
)

// FactoryClient is the client API for Factory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactoryClient interface {
	// Setup
	Init(ctx context.Context, in *services.InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	// Affect Code
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Affect Data
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	// Deployment/Build only on init data
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error)
	Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error)
	// Communication helper
	Communicate(ctx context.Context, in *agents.Engage, opts ...grpc.CallOption) (*agents.InformationRequest, error)
}

type factoryClient struct {
	cc grpc.ClientConnInterface
}

func NewFactoryClient(cc grpc.ClientConnInterface) FactoryClient {
	return &factoryClient{cc}
}

func (c *factoryClient) Init(ctx context.Context, in *services.InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Factory_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Factory_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, Factory_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, Factory_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (*BuildResponse, error) {
	out := new(BuildResponse)
	err := c.cc.Invoke(ctx, Factory_Build_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Deploy(ctx context.Context, in *DeploymentRequest, opts ...grpc.CallOption) (*DeploymentResponse, error) {
	out := new(DeploymentResponse)
	err := c.cc.Invoke(ctx, Factory_Deploy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *factoryClient) Communicate(ctx context.Context, in *agents.Engage, opts ...grpc.CallOption) (*agents.InformationRequest, error) {
	out := new(agents.InformationRequest)
	err := c.cc.Invoke(ctx, Factory_Communicate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactoryServer is the server API for Factory service.
// All implementations must embed UnimplementedFactoryServer
// for forward compatibility
type FactoryServer interface {
	// Setup
	Init(context.Context, *services.InitRequest) (*InitResponse, error)
	// Affect Code
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Affect Data
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	// Deployment/Build only on init data
	Build(context.Context, *BuildRequest) (*BuildResponse, error)
	Deploy(context.Context, *DeploymentRequest) (*DeploymentResponse, error)
	// Communication helper
	Communicate(context.Context, *agents.Engage) (*agents.InformationRequest, error)
	mustEmbedUnimplementedFactoryServer()
}

// UnimplementedFactoryServer must be embedded to have forward compatible implementations.
type UnimplementedFactoryServer struct {
}

func (UnimplementedFactoryServer) Init(context.Context, *services.InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedFactoryServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFactoryServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFactoryServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedFactoryServer) Build(context.Context, *BuildRequest) (*BuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedFactoryServer) Deploy(context.Context, *DeploymentRequest) (*DeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedFactoryServer) Communicate(context.Context, *agents.Engage) (*agents.InformationRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedFactoryServer) mustEmbedUnimplementedFactoryServer() {}

// UnsafeFactoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactoryServer will
// result in compilation errors.
type UnsafeFactoryServer interface {
	mustEmbedUnimplementedFactoryServer()
}

func RegisterFactoryServer(s grpc.ServiceRegistrar, srv FactoryServer) {
	s.RegisterService(&Factory_ServiceDesc, srv)
}

func _Factory_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Init(ctx, req.(*services.InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Build_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Build(ctx, req.(*BuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Deploy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Deploy(ctx, req.(*DeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Factory_Communicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(agents.Engage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactoryServer).Communicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Factory_Communicate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactoryServer).Communicate(ctx, req.(*agents.Engage))
	}
	return interceptor(ctx, in, info, handler)
}

// Factory_ServiceDesc is the grpc.ServiceDesc for Factory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Factory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.services.factory.Factory",
	HandlerType: (*FactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Factory_Init_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Factory_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Factory_Update_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Factory_Sync_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Factory_Build_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Factory_Deploy_Handler,
		},
		{
			MethodName: "Communicate",
			Handler:    _Factory_Communicate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/factory/factory.proto",
}
