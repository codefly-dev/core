// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/observability/dependencies.proto (package v1.observability, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.observability.DependencyGraphRequest
 */
export class DependencyGraphRequest extends Message<DependencyGraphRequest> {
  constructor(data?: PartialMessage<DependencyGraphRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.DependencyGraphRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DependencyGraphRequest {
    return new DependencyGraphRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DependencyGraphRequest {
    return new DependencyGraphRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DependencyGraphRequest {
    return new DependencyGraphRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DependencyGraphRequest | PlainMessage<DependencyGraphRequest> | undefined, b: DependencyGraphRequest | PlainMessage<DependencyGraphRequest> | undefined): boolean {
    return proto3.util.equals(DependencyGraphRequest, a, b);
  }
}

/**
 * @generated from message v1.observability.GraphNode
 */
export class GraphNode extends Message<GraphNode> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: bool value = 2;
   */
  value = false;

  constructor(data?: PartialMessage<GraphNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.GraphNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphNode {
    return new GraphNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphNode {
    return new GraphNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphNode {
    return new GraphNode().fromJsonString(jsonString, options);
  }

  static equals(a: GraphNode | PlainMessage<GraphNode> | undefined, b: GraphNode | PlainMessage<GraphNode> | undefined): boolean {
    return proto3.util.equals(GraphNode, a, b);
  }
}

/**
 * @generated from message v1.observability.GraphEdge
 */
export class GraphEdge extends Message<GraphEdge> {
  /**
   * @generated from field: string from = 1;
   */
  from = "";

  /**
   * @generated from field: string to = 2;
   */
  to = "";

  constructor(data?: PartialMessage<GraphEdge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.GraphEdge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphEdge {
    return new GraphEdge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphEdge {
    return new GraphEdge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphEdge {
    return new GraphEdge().fromJsonString(jsonString, options);
  }

  static equals(a: GraphEdge | PlainMessage<GraphEdge> | undefined, b: GraphEdge | PlainMessage<GraphEdge> | undefined): boolean {
    return proto3.util.equals(GraphEdge, a, b);
  }
}

/**
 * @generated from message v1.observability.GraphResponse
 */
export class GraphResponse extends Message<GraphResponse> {
  /**
   * @generated from field: repeated v1.observability.GraphNode nodes = 1;
   */
  nodes: GraphNode[] = [];

  /**
   * @generated from field: repeated v1.observability.GraphEdge edges = 2;
   */
  edges: GraphEdge[] = [];

  constructor(data?: PartialMessage<GraphResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.GraphResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "message", T: GraphNode, repeated: true },
    { no: 2, name: "edges", kind: "message", T: GraphEdge, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphResponse {
    return new GraphResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphResponse {
    return new GraphResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphResponse {
    return new GraphResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GraphResponse | PlainMessage<GraphResponse> | undefined, b: GraphResponse | PlainMessage<GraphResponse> | undefined): boolean {
    return proto3.util.equals(GraphResponse, a, b);
  }
}

