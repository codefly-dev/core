// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/observability/logs.proto (package v1.observability, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { LogSessionGroup } from "../agents/logs_pb.js";

/**
 * @generated from message v1.observability.LogRequest
 */
export class LogRequest extends Message<LogRequest> {
  /**
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;

  constructor(data?: PartialMessage<LogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.LogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: Timestamp },
    { no: 2, name: "to", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRequest {
    return new LogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRequest {
    return new LogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRequest {
    return new LogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LogRequest | PlainMessage<LogRequest> | undefined, b: LogRequest | PlainMessage<LogRequest> | undefined): boolean {
    return proto3.util.equals(LogRequest, a, b);
  }
}

/**
 * @generated from message v1.observability.LogResponse
 */
export class LogResponse extends Message<LogResponse> {
  /**
   * @generated from field: repeated v1.agents.logs.LogSessionGroup groups = 1;
   */
  groups: LogSessionGroup[] = [];

  constructor(data?: PartialMessage<LogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.observability.LogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: LogSessionGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogResponse {
    return new LogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogResponse {
    return new LogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogResponse {
    return new LogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LogResponse | PlainMessage<LogResponse> | undefined, b: LogResponse | PlainMessage<LogResponse> | undefined): boolean {
    return proto3.util.equals(LogResponse, a, b);
  }
}

