// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/actions/service.proto (package v1.actions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Agent } from "../base/agent_pb.js";

/**
 * @generated from message v1.actions.AddService
 */
export class AddService extends Message<AddService> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: bool override = 2;
   */
  override = false;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string application = 5;
   */
  application = "";

  /**
   * @generated from field: string project = 6;
   */
  project = "";

  /**
   * @generated from field: string namespace = 7;
   */
  namespace = "";

  /**
   * @generated from field: v1.base.Agent agent = 8;
   */
  agent?: Agent;

  /**
   * @generated from field: string path = 9;
   */
  path = "";

  constructor(data?: PartialMessage<AddService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.actions.AddService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "override", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "agent", kind: "message", T: Agent },
    { no: 9, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddService {
    return new AddService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddService {
    return new AddService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddService {
    return new AddService().fromJsonString(jsonString, options);
  }

  static equals(a: AddService | PlainMessage<AddService> | undefined, b: AddService | PlainMessage<AddService> | undefined): boolean {
    return proto3.util.equals(AddService, a, b);
  }
}

/**
 * @generated from message v1.actions.SetServiceActive
 */
export class SetServiceActive extends Message<SetServiceActive> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string application = 3;
   */
  application = "";

  constructor(data?: PartialMessage<SetServiceActive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.actions.SetServiceActive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetServiceActive {
    return new SetServiceActive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetServiceActive {
    return new SetServiceActive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetServiceActive {
    return new SetServiceActive().fromJsonString(jsonString, options);
  }

  static equals(a: SetServiceActive | PlainMessage<SetServiceActive> | undefined, b: SetServiceActive | PlainMessage<SetServiceActive> | undefined): boolean {
    return proto3.util.equals(SetServiceActive, a, b);
  }
}

/**
 * @generated from message v1.actions.AddServiceDependency
 */
export class AddServiceDependency extends Message<AddServiceDependency> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string application = 3;
   */
  application = "";

  /**
   * @generated from field: string dependency_name = 4;
   */
  dependencyName = "";

  /**
   * @generated from field: string dependency_application = 5;
   */
  dependencyApplication = "";

  /**
   * @generated from field: string project = 6;
   */
  project = "";

  /**
   * @generated from field: repeated string endpoints = 7;
   */
  endpoints: string[] = [];

  constructor(data?: PartialMessage<AddServiceDependency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.actions.AddServiceDependency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dependency_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "dependency_application", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "endpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddServiceDependency {
    return new AddServiceDependency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddServiceDependency {
    return new AddServiceDependency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddServiceDependency {
    return new AddServiceDependency().fromJsonString(jsonString, options);
  }

  static equals(a: AddServiceDependency | PlainMessage<AddServiceDependency> | undefined, b: AddServiceDependency | PlainMessage<AddServiceDependency> | undefined): boolean {
    return proto3.util.equals(AddServiceDependency, a, b);
  }
}

