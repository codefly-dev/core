// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/actions/workspace.proto (package v1.actions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Organization } from "../base/organization_pb.js";

/**
 * @generated from message v1.actions.AddWorkspace
 */
export class AddWorkspace extends Message<AddWorkspace> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: v1.base.Organization organization = 2;
   */
  organization?: Organization;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string dir = 5;
   */
  dir = "";

  /**
   * @generated from field: string project_root = 6;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<AddWorkspace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.actions.AddWorkspace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization", kind: "message", T: Organization },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "dir", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddWorkspace {
    return new AddWorkspace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddWorkspace {
    return new AddWorkspace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddWorkspace {
    return new AddWorkspace().fromJsonString(jsonString, options);
  }

  static equals(a: AddWorkspace | PlainMessage<AddWorkspace> | undefined, b: AddWorkspace | PlainMessage<AddWorkspace> | undefined): boolean {
    return proto3.util.equals(AddWorkspace, a, b);
  }
}

