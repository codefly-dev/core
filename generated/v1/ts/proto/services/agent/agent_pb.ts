// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file proto/services/agent/agent.proto (package v1.services.agent, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.services.agent.Capability
 */
export class Capability extends Message<Capability> {
  /**
   * @generated from field: v1.services.agent.Capability.Type type = 1;
   */
  type = Capability_Type.UNKNOWN;

  constructor(data?: PartialMessage<Capability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.agent.Capability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Capability_Type) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Capability {
    return new Capability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Capability {
    return new Capability().fromJsonString(jsonString, options);
  }

  static equals(a: Capability | PlainMessage<Capability> | undefined, b: Capability | PlainMessage<Capability> | undefined): boolean {
    return proto3.util.equals(Capability, a, b);
  }
}

/**
 * @generated from enum v1.services.agent.Capability.Type
 */
export enum Capability_Type {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FACTORY = 1;
   */
  FACTORY = 1,

  /**
   * @generated from enum value: RUNTIME = 2;
   */
  RUNTIME = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Capability_Type)
proto3.util.setEnumType(Capability_Type, "v1.services.agent.Capability.Type", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "FACTORY" },
  { no: 2, name: "RUNTIME" },
]);

/**
 * @generated from message v1.services.agent.AgentInformation
 */
export class AgentInformation extends Message<AgentInformation> {
  /**
   * @generated from field: repeated v1.services.agent.Capability capabilities = 1;
   */
  capabilities: Capability[] = [];

  constructor(data?: PartialMessage<AgentInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.agent.AgentInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "capabilities", kind: "message", T: Capability, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentInformation {
    return new AgentInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentInformation {
    return new AgentInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentInformation {
    return new AgentInformation().fromJsonString(jsonString, options);
  }

  static equals(a: AgentInformation | PlainMessage<AgentInformation> | undefined, b: AgentInformation | PlainMessage<AgentInformation> | undefined): boolean {
    return proto3.util.equals(AgentInformation, a, b);
  }
}

/**
 * @generated from message v1.services.agent.AgentInformationRequest
 */
export class AgentInformationRequest extends Message<AgentInformationRequest> {
  constructor(data?: PartialMessage<AgentInformationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.services.agent.AgentInformationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentInformationRequest {
    return new AgentInformationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentInformationRequest {
    return new AgentInformationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentInformationRequest {
    return new AgentInformationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AgentInformationRequest | PlainMessage<AgentInformationRequest> | undefined, b: AgentInformationRequest | PlainMessage<AgentInformationRequest> | undefined): boolean {
    return proto3.util.equals(AgentInformationRequest, a, b);
  }
}

